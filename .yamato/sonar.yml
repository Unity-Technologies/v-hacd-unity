csharp:
    name: Sonarqube C# Scan
    agent:
        type: Unity::metal::macmini
        image: package-ci/mac
        flavor: m1.mac
    variables:
        PROJECT_PATH: TestVhacd
        SONARQUBE_PROJECT_KEY: ai-robotics-vhacd-csharp
        SONARQUBE_PROJECT_BASE_DIR: /Users/bokken/build/output/Unity-Technologies/VHACD/com.unity.robotics.vhacd
        MSBUILD_SLN_PATH: ./TestVhacd/TestVhacd.sln
        PROJECT_ROOT: /Users/bokken/build/output/Unity-Technologies/VHACD/
        UNITY_VERSION: 2020.3.21f1
    commands:
        - npm install upm-ci-utils@stable -g --registry https://artifactory.prd.it.unity3d.com/artifactory/api/npm/upm-npm
        - unity-downloader-cli -u $UNITY_VERSION -c Editor
        - brew install mono corretto
        - curl https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/5.2.1.31210/sonar-scanner-msbuild-5.2.1.31210-net46.zip -o sonar-scanner-msbuild-net46.zip -L
        - unzip sonar-scanner-msbuild-net46.zip -d ~/sonar-scanner-msbuild
        - chmod a+x ~/sonar-scanner-msbuild/sonar-scanner-4.6.1.2450/bin/sonar-scanner
        - .Editor/Unity.app/Contents/MacOS/Unity -projectPath $PROJECT_PATH -batchmode -quit -nographics -logFile - -executeMethod "UnityEditor.SyncVS.SyncSolution"
        - command: |
            cd $PROJECT_PATH
            for file in *.csproj; do sed -i.backup "s/^[[:blank:]]*<ReferenceOutputAssembly>false<\/ReferenceOutputAssembly>/<ReferenceOutputAssembly>true<\/ReferenceOutputAssembly>/g" $file; rm $file.backup; done
            cd $PROJECT_ROOT
        - mono ~/sonar-scanner-msbuild/SonarScanner.MSBuild.exe begin /k:$SONARQUBE_PROJECT_KEY /d:sonar.host.url=$SONARQUBE_ENDPOINT_URL_PRD /d:sonar.login=$SONARQUBE_TOKEN_PRD /d:sonar.projectBaseDir=$SONARQUBE_PROJECT_BASE_DIR
        - msbuild $MSBUILD_SLN_PATH
        - mono ~/sonar-scanner-msbuild/SonarScanner.MSBuild.exe end /d:sonar.login=$SONARQUBE_TOKEN_PRD
    triggers:
        cancel_old_ci: true
        expression: |
            ((pull_request.target eq "main" OR pull_request.target eq "dev")
            AND NOT pull_request.push.changes.all match "**/*.md") OR
            (push.branch eq "main" OR push.branch eq "dev")
standard:
    name: Sonarqube Standard Scan
    agent:
        type: Unity::VM
        image: robotics/ci-ubuntu20:latest
        flavor: i1.large
    variables:
        SONARQUBE_PROJECT_KEY: ai-robotics-vhacd-standard
        ROOT_DIR: /home/bokken/build/output/Unity-Technologies/VHACD
        SRC_DIR: /home/bokken/build/output/Unity-Technologies/VHACD/src
        BUILD_WRAPPER_DIR: /home/bokken/build/output/Unity-Technologies/VHACD/build_wrapper_output_directory
    commands:
        - curl https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip -o sonar-scanner-linux.zip -L
        - unzip sonar-scanner-linux.zip -d ~/sonar-scanner
        - curl $SONARQUBE_ENDPOINT_URL_PRD/static/cpp/build-wrapper-linux-x86.zip -o sonar-build-wrapper-linux.zip -L
        - unzip sonar-build-wrapper-linux.zip -d ~/sonar-build-wrapper
        - mkdir build
        - cd build
        - cmake $SRC_DIR
        - ~/sonar-build-wrapper/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir $BUILD_WRAPPER_DIR make
        - cd $ROOT_DIR
        - ~/sonar-scanner/sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY -Dsonar.sources=$SRC_FOLDER -Dsonar.host.url=$SONARQUBE_ENDPOINT_URL_PRD -Dsonar.login=$SONARQUBE_TOKEN_PRD -Dsonar.cfamily.build-wrapper-output=$BUILD_WRAPPER_DIR
    triggers:
        cancel_old_ci: true
        expression: |
            ((pull_request.target eq "main" OR pull_request.target eq "dev")
            AND NOT pull_request.push.changes.all match "**/*.md") OR
            (push.branch eq "main" OR push.branch eq "dev")